---
description: 
globs: 
alwaysApply: true
---

# Your rule content

# Project Rules for Functrace
## 1. 命名规范
- 所有结构体、函数和变量使用驼峰命名法（CamelCase）。
- 常量使用全大写字母，单词之间用下划线分隔（如 `ENV_TRACE_CHANNEL_COUNT`）。

## 2. 代码结构
- 每个文件应以包声明开头，紧接着是导入语句。
- 结构体和函数之间应留有适当的空行，以提高可读性。

## 3. 注释
- 每个导出（public）函数和结构体应有注释，描述其功能和用途。
- 注释应使用完整的句子，并以句号结束。
- 注释统一采用中文。

## 4. 错误处理
- 所有可能返回错误的函数调用后应进行错误检查，并适当处理。
- 使用 `fmt.Errorf` 来包装错误信息，提供上下文。

## 5. 代码格式化
- 使用 `go fmt` 工具自动格式化代码，确保一致的代码风格。
- 每行代码不应超过 80 个字符，必要时进行换行。

## 6. 依赖管理
- 使用 Go Modules 管理依赖，确保 `go.mod` 文件中列出所有依赖项。
- 定期更新依赖，确保使用最新的安全版本。

## 7. 测试
- 为每个导出函数编写单元测试，确保功能的正确性。
- 测试文件应以 `_test.go` 结尾，并放在与被测试文件相同的目录中。

## 8. 性能考虑
- 在性能敏感的代码中，避免不必要的内存分配和复制。
- 使用 `sync` 包中的原子操作和锁来管理并发访问。

## 9. 日志记录
- 使用 `logrus` 记录重要的事件和错误信息。
- 日志信息应包含上下文，以便于调试。
- 日志内容消息体统一采用英文；

## 10. 代码审查
- 所有代码更改应通过 Pull Request 提交，并进行代码审查。
- 代码审查应关注代码质量、可读性和性能。

